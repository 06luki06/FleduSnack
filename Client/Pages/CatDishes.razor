@page "/cats/{CatId:guid}/dishes"
@using At.luki0606.FleduSnack.Shared.DTOs.Responses
@using At.luki0606.FleduSnack.Shared.DTOs.Requests
@using At.luki0606.FleduSnack.Shared.Enums
@using System.IO
@inject HttpClient Http
@inject NavigationManager Navigation

<h3 class="text-center mb-3">🍽️ Dishes for @cat?.Name 🍽️</h3>

@if (cat is null)
{
    <Alert Color="AlertColor.Info">Loading cat...</Alert>
}
else
{
    <!-- Add Dish Button -->
    <div class="d-flex justify-content-center mb-3">
        <Button Color="ButtonColor.Success" @onclick="ShowAddForm">
            <Icon Name="IconName.PlusCircle" /> Add Dish
        </Button>
    </div>

    <!-- Add Form -->
    @if (showAddForm)
    {
        <Card Class="mb-4 bg-light">
            <CardHeader>
                <h5>Add a new dish</h5>
            </CardHeader>
            <CardBody>
                <TextInput Placeholder="Brand" @bind-Value="newDishBrand" Class="mb-2" />
                <TextInput Placeholder="Flavor" @bind-Value="newDishFlavor" Class="mb-2" />

                <div class="mb-3">
                    <label class="form-label fw-bold">Rating</label>
                    <div class="d-flex gap-3">
                        <InputRadioGroup @bind-Value="newDishTasting">
                            <InputRadio Value="Tasting.NotReviewed" /> <span title="Not Reviewed">😶</span>
                            <InputRadio Value="Tasting.Low" /> <span title="Low">😾</span>
                            <InputRadio Value="Tasting.Mid" /> <span title="Mid">😐</span>
                            <InputRadio Value="Tasting.High" /> <span title="High">😻</span>
                        </InputRadioGroup>
                    </div>
                </div>

                <InputFile OnChange="OnAddImageSelected" Class="form-control mb-3" />
                @if (newDishImage is not null)
                {
                    <div class="alert alert-info p-2">Selected: @newDishImage.Name</div>
                }

                <div class="d-flex gap-2">
                    <Button Color="ButtonColor.Success" @onclick="AddDish">
                        <Icon Name="IconName.CheckLg" /> Save
                    </Button>
                    <Button Color="ButtonColor.Danger" @onclick="() => showAddForm = false">
                        <Icon Name="IconName.XLg" /> Cancel
                    </Button>
                </div>
            </CardBody>
        </Card>
    }

    <!-- Dish List -->
    <h4>Dishes</h4>
    @if (dishes is null)
    {
        <Alert Color="AlertColor.Info">Loading dishes...</Alert>
    }
    else if (dishes.Count == 0)
    {
        <Alert Color="AlertColor.Warning">No dishes found for @cat.Name.</Alert>
    }
    else
    {
        <div class="list-group">
            @foreach (var dish in dishes)
            {
                <div class="list-group-item d-flex justify-content-between align-items-center">
                    @if (editDishId == dish.Id)
                    {
                        <!-- Edit Form -->
                        <div class="w-100">
                            <h6>Edit Dish</h6>
                            <input class="form-control mb-2" placeholder="Brand" @bind="editDishBrand" />
                            <input class="form-control mb-2" placeholder="Flavor" @bind="editDishFlavor" />

                            <!-- RadioGroup für Rating -->
                            <div class="d-flex gap-3 mb-2">
                                <InputRadioGroup @bind-Value="editDishTasting">
                                    <label class="me-2">
                                        <InputRadio Value="Tasting.NotReviewed" /> 😶
                                    </label>
                                    <label class="me-2">
                                        <InputRadio Value="Tasting.Low" /> 😾
                                    </label>
                                    <label class="me-2">
                                        <InputRadio Value="Tasting.Mid" /> 😐
                                    </label>
                                    <label class="me-2">
                                        <InputRadio Value="Tasting.High" /> 😻
                                    </label>
                                </InputRadioGroup>
                            </div>

                            <!-- Image Upload -->
                            <InputFile OnChange="OnEditImageSelected" class="form-control mb-2" />
                            @if (editDishImage is not null)
                            {
                                <p>Selected: @editDishImage.Name</p>
                            }

                            <!-- Buttons -->
                            <div class="d-flex gap-2">
                                <Button Color="ButtonColor.Success" Size="ButtonSize.Small" @onclick="() => SaveEdit(dish.Id)">
                                    <Icon Name="IconName.CheckLg" /> Save
                                </Button>
                                <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="CancelEdit">
                                    <Icon Name="IconName.XLg" /> Cancel
                                </Button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- Normal View -->
                        <div class="d-flex align-items-center gap-3">
                            @if (!string.IsNullOrEmpty(dish.ImageUrl))
                            {
                                <img src="@dish.ImageUrl" class="img-thumbnail" style="width:60px; height:60px; object-fit:cover;" />
                            }

                            <div>
                                <strong>@dish.Brand</strong> – @dish.Flavor
                            </div>
                        </div>

                        <div class="d-flex align-items-center gap-2">
                            @RenderTastingSmiley(dish.Tasting)

                            <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" @onclick="() => StartEdit(dish)">
                                <Icon Name="IconName.PencilSquare" /> Edit
                            </Button>
                            <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="() => DeleteDish(dish.Id)">
                                <Icon Name="IconName.Trash" /> Delete
                            </Button>
                        </div>
                    }
                </div>
            }
        </div>
    }

    <div style="position:fixed; bottom: 30px; left:50%; transform: translateX(-50%); z-index:1050">
        <Button Color="ButtonColor.Info" Size="ButtonSize.Large" Class="rounded-circle" @onclick="ReturnToCats">
            <Icon Name="IconName.ArrowLeftCircle" Color="IconColor.White"/>
        </Button>
    </div>
}

@code {
    #region General
    [Parameter] public Guid CatId { get; set; }

    private CatResponseDto? cat;
    private List<DishResponseDto>? dishes;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            cat = await Http.GetFromJsonAsync<CatResponseDto>($"api/cats/{CatId}");
            dishes = await Http.GetFromJsonAsync<List<DishResponseDto>>($"api/cats/{CatId}/dishes");
        }
        catch (Exception ex)
        {
            await Console.Error.WriteLineAsync($"Error loading dishes: {ex.Message}");
        }
    }

    private RenderFragment RenderTastingSmiley(Tasting tasting) => tasting switch
    {
        Tasting.Low => __builder => { __builder.AddContent(0, "😾"); }
        ,
        Tasting.Mid => __builder => { __builder.AddContent(0, "😐"); }
        ,
        Tasting.High => __builder => { __builder.AddContent(0, "😻"); }
        ,
        _ => __builder => { __builder.AddContent(0, "😶"); } // NotReviewed
    };
    #endregion

    #region Navigation
    private void ReturnToCats()
    {
        Navigation?.NavigateTo("/");
    }
    #endregion

    #region Add
    private bool showAddForm = false;
    private string newDishBrand = string.Empty;
    private string newDishFlavor = string.Empty;
    private Tasting newDishTasting = Tasting.NotReviewed;
    private IBrowserFile? newDishImage;

    private void OnAddImageSelected(InputFileChangeEventArgs e)
    {
        newDishImage = e.File;
    }

    private void ShowAddForm()
    {
        newDishBrand = string.Empty;
        newDishFlavor = string.Empty;
        newDishTasting = Tasting.NotReviewed;
        showAddForm = true;
    }

    private async Task AddDish()
    {
        if (string.IsNullOrWhiteSpace(newDishBrand) || string.IsNullOrWhiteSpace(newDishFlavor))
        {
            return;
        }

        using MultipartFormDataContent content = new MultipartFormDataContent();
        content.Add(new StringContent(newDishBrand), "Brand");
        content.Add(new StringContent(newDishFlavor), "Flavor");
        content.Add(new StringContent(newDishTasting.ToString()), "Tasting");

        if (newDishImage is not null)
        {
            Stream stream = newDishImage.OpenReadStream(5 * 1024 * 1024); // max 5MB
            content.Add(new StreamContent(stream), "Image", newDishImage.Name);
        }

        HttpResponseMessage response = await Http.PostAsync($"api/cats/{CatId}/dishes", content);

        if (response.IsSuccessStatusCode)
        {
            newDishImage = null;
            showAddForm = false;
            await LoadData();
        }
        else
        {
            await Console.Error.WriteLineAsync($"Failed to add dish: {response.StatusCode}");
        }
    }
    #endregion

    #region Edit
    private Guid? editDishId = null;
    private string editDishBrand = string.Empty;
    private string editDishFlavor = string.Empty;
    private Tasting editDishTasting = Tasting.NotReviewed;
    private IBrowserFile? editDishImage;

    private void OnEditImageSelected(InputFileChangeEventArgs e)
    {
        editDishImage = e.File;
    }

    private void StartEdit(DishResponseDto dish)
    {
        editDishId = dish.Id;
        editDishBrand = dish.Brand;
        editDishFlavor = dish.Flavor;
        editDishTasting = dish.Tasting;
    }

    private void CancelEdit()
    {
        editDishId = null;
    }

    private async Task SaveEdit(Guid id)
    {
        using MultipartFormDataContent content = new MultipartFormDataContent();
        content.Add(new StringContent(editDishBrand), "Brand");
        content.Add(new StringContent(editDishFlavor), "Flavor");
        content.Add(new StringContent(editDishTasting.ToString()), "Tasting");

        if (editDishImage is not null)
        {
            Stream stream = editDishImage.OpenReadStream(5 * 1024 * 1024);
            content.Add(new StreamContent(stream), "Image", editDishImage.Name);
        }

        HttpResponseMessage response = await Http.PutAsync($"api/cats/{CatId}/dishes/{id}", content);

        if (response.IsSuccessStatusCode)
        {
            editDishImage = null;
            editDishId = null;
            await LoadData();
        }
        else
        {
            await Console.Error.WriteLineAsync($"Failed to update dish {id}: {response.StatusCode}");
        }
    }
    #endregion

    #region Delete
    private async Task DeleteDish(Guid id)
    {
        HttpResponseMessage response = await Http.DeleteAsync($"api/cats/{CatId}/dishes/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadData();
        }
        else
        {
            await Console.Error.WriteLineAsync($"Failed to delete dish {id}: {response.StatusCode}");
        }
    }
    #endregion
}
