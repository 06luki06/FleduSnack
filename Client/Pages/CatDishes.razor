@page "/cats/{CatId:guid}/dishes"
@using At.luki0606.FleduSnack.Shared.DTOs.Responses
@using At.luki0606.FleduSnack.Shared.DTOs.Requests
@using At.luki0606.FleduSnack.Shared.Enums
@using System.IO
@inject HttpClient Http

<h3 class="mb-3">🍽️ Dishes for @cat?.Name</h3>

@if (cat is null)
{
    <div class="alert alert-info">Loading cat...</div>
}
else
{
    <!-- Add Dish Button -->
    <div class="mb-3">
        <button class="btn btn-success" @onclick="ShowAddForm">
            <i class="bi bi-plus-circle"></i> Add Dish
        </button>
    </div>

    <a class="btn btn-info btn-sm" href="/cats">Return to cats</a>

    <!-- Add Form -->
    @if (showAddForm)
    {
        <div class="card mb-4 p-3 bg-light">
            <h5>Add a new dish</h5>
            <div class="mb-2">
                <input class="form-control mb-2" placeholder="Brand" @bind="newDishBrand" />
                <input class="form-control mb-2" placeholder="Flavor" @bind="newDishFlavor" />
                <select class="form-select mb-2" @bind="newDishTasting">
                    <option value="NotReviewed">Not Reviewed</option>
                    <option value="Low">Low</option>
                    <option value="Mid">Mid</option>
                    <option value="High">High</option>
                </select>

                <InputFile OnChange="OnAddImageSelected" class="form-control mb-2" />
                @if (newDishImage is not null)
                {
                    <p>Selected: @newDishImage.Name</p>
                }

                <button class="btn btn-primary me-2" @onclick="AddDish">Save</button>
                <button class="btn btn-secondary" @onclick="() => showAddForm = false">Cancel</button>
            </div>
        </div>
    }

    <!-- Dish List -->
    <h4>Dishes</h4>
    @if (dishes is null)
    {
        <div class="alert alert-info">Loading dishes...</div>
    }
    else if (dishes.Count == 0)
    {
        <div class="alert alert-warning">No dishes found for this cat.</div>
    }
    else
    {
        <ul class="list-group">
            @foreach (var dish in dishes)
            {
                <li class="list-group-item">
                    @if (editDishId == dish.Id)
                    {
                        <!-- Edit Form -->
                        <div class="mb-2">
                            <input class="form-control mb-2" @bind="editDishBrand" />
                            <input class="form-control mb-2" @bind="editDishFlavor" />
                            <select class="form-select mb-2" @bind="editDishTasting">
                                <option value="NotReviewed">Not Reviewed</option>
                                <option value="Low">Low</option>
                                <option value="Mid">Mid</option>
                                <option value="High">High</option>
                            </select>

                            <InputFile OnChange="OnEditImageSelected" class="form-control mb-2" />
                            @if (editDishImage is not null)
                            {
                                <p>Selected: @editDishImage.Name</p>
                            }
                        </div>
                        <button class="btn btn-primary btn-sm me-2" @onclick="() => SaveEdit(dish.Id)">Save</button>
                        <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                    }
                    else
                    {
                        <!-- Normal View -->
                        <div class="d-flex justify-content-between align-items-center">
                            <span>
                                <strong>@dish.Brand</strong> – @dish.Flavor
                            </span>
                            @if (!string.IsNullOrEmpty(dish.ImageUrl))
                            {
                                <img src="@dish.ImageUrl" class="img-thumbnail me-2" style="max-height:100px;" />
                            }
                            <div>
                                <span class="badge bg-secondary me-2">@dish.Tasting</span>
                                <button class="btn btn-primary btn-sm me-1" @onclick="() => StartEdit(dish)">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="async () => await DeleteDish(dish.Id)">Delete</button>
                            </div>
                        </div>
                    }
                </li>
            }
        </ul>
    }
}

@code {
    #region General
    [Parameter] public Guid CatId { get; set; }

    private CatResponseDto? cat;
    private List<DishResponseDto>? dishes;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            cat = await Http.GetFromJsonAsync<CatResponseDto>($"api/cats/{CatId}");
            dishes = await Http.GetFromJsonAsync<List<DishResponseDto>>($"api/cats/{CatId}/dishes");
        }
        catch (Exception ex)
        {
            await Console.Error.WriteLineAsync($"Error loading dishes: {ex.Message}");
        }
    }
    #endregion

    #region Add
    private bool showAddForm = false;
    private string newDishBrand = string.Empty;
    private string newDishFlavor = string.Empty;
    private Tasting newDishTasting = Tasting.NotReviewed;
    private IBrowserFile? newDishImage;

    private void OnAddImageSelected(InputFileChangeEventArgs e)
    {
        newDishImage = e.File;
    }

    private void ShowAddForm()
    {
        newDishBrand = string.Empty;
        newDishFlavor = string.Empty;
        newDishTasting = Tasting.NotReviewed;
        showAddForm = true;
    }

    private async Task AddDish()
    {
        if (string.IsNullOrWhiteSpace(newDishBrand) || string.IsNullOrWhiteSpace(newDishFlavor))
        {
            return;
        }

        using MultipartFormDataContent content = new MultipartFormDataContent();
        content.Add(new StringContent(newDishBrand), "Brand");
        content.Add(new StringContent(newDishFlavor), "Flavor");
        content.Add(new StringContent(newDishTasting.ToString()), "Tasting");

        if (newDishImage is not null)
        {
            Stream stream = newDishImage.OpenReadStream(5 * 1024 * 1024); // max 5MB
            content.Add(new StreamContent(stream), "Image", newDishImage.Name);
        }

        HttpResponseMessage response = await Http.PostAsync($"api/cats/{CatId}/dishes", content);

        if (response.IsSuccessStatusCode)
        {
            newDishImage = null;
            showAddForm = false;
            await LoadData();
        }
        else
        {
            await Console.Error.WriteLineAsync($"Failed to add dish: {response.StatusCode}");
        }
    }
    #endregion

    #region Edit
    private Guid? editDishId = null;
    private string editDishBrand = string.Empty;
    private string editDishFlavor = string.Empty;
    private Tasting editDishTasting = Tasting.NotReviewed;
    private IBrowserFile? editDishImage;

    private void OnEditImageSelected(InputFileChangeEventArgs e)
    {
        editDishImage = e.File;
    }

    private void StartEdit(DishResponseDto dish)
    {
        editDishId = dish.Id;
        editDishBrand = dish.Brand;
        editDishFlavor = dish.Flavor;
        editDishTasting = dish.Tasting;
    }

    private void CancelEdit()
    {
        editDishId = null;
    }

    private async Task SaveEdit(Guid id)
    {
        using MultipartFormDataContent content = new MultipartFormDataContent();
        content.Add(new StringContent(editDishBrand), "Brand");
        content.Add(new StringContent(editDishFlavor), "Flavor");
        content.Add(new StringContent(editDishTasting.ToString()), "Tasting");

        if (editDishImage is not null)
        {
            Stream stream = editDishImage.OpenReadStream(5 * 1024 * 1024);
            content.Add(new StreamContent(stream), "Image", editDishImage.Name);
        }

        HttpResponseMessage response = await Http.PutAsync($"api/cats/{CatId}/dishes/{id}", content);

        if (response.IsSuccessStatusCode)
        {
            editDishImage = null;
            editDishId = null;
            await LoadData();
        }
        else
        {
            await Console.Error.WriteLineAsync($"Failed to update dish {id}: {response.StatusCode}");
        }
    }
    #endregion

    #region Delete
    private async Task DeleteDish(Guid id)
    {
        HttpResponseMessage response = await Http.DeleteAsync($"api/cats/{CatId}/dishes/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadData();
        }
        else
        {
            await Console.Error.WriteLineAsync($"Failed to delete dish {id}: {response.StatusCode}");
        }
    }
    #endregion
}
