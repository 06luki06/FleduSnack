@page "/"
@page "/cats"

@using At.luki0606.FleduSnack.Shared.DTOs.Requests
@using At.luki0606.FleduSnack.Shared.DTOs.Responses
@using At.luki0606.FleduSnack.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3 class="text-center my-4">🐱 FleduSnack 🐱</h3>

<div class="text-center mb-4">
    <Button Color="ButtonColor.Success" @onclick="ShowAddForm">
        <Icon Name="IconName.PlusCircle" /> Add Cat
    </Button>
</div>

@if (showAddForm)
{
    <div class="d-flex justify-content-center mb-4">
        <div class="list-group w-75">
            <div class="list-group-item d-flex align-items-center">
                <div class="flex-grow-1 me-3">
                    <InputText class="form-control" placeholder="Cat name" @bind-Value="newCatName" />
                </div>
                <div class="btn-group">
                    <Button Color="ButtonColor.Success" Size="ButtonSize.Small" @onclick="AddCat">
                        <Icon Name="IconName.CheckLg" /> Add
                    </Button>
                    <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="() => showAddForm = false">
                        <Icon Name="IconName.XLg" /> Cancel
                    </Button>
                </div>
            </div>
        </div>
    </div>
}

@if (cats is null)
{
    <Alert Color="AlertColor.Info">Loading cats...</Alert>
}
else if (cats.Count == 0)
{
    <Alert Color="AlertColor.Warning">No cats found.</Alert>
}
else
{
    <!-- Cats Grid -->
    <div class="d-flex justify-content-center">
        <ul class="list-group w-75">
            @foreach (var cat in cats)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @if (editCatId == cat.Id)
                    {
                        <!-- Edit Mode -->
                        <div class="flex-grow-1 me-3">
                            <InputText class="form-control" @bind-Value="editCatName" />
                        </div>
                        <div class="btn-group">
                            <Button Color="ButtonColor.Success" Size="ButtonSize.Small" @onclick="() => SaveEdit(cat.Id)">
                                <Icon Name="IconName.CheckLg" /> Save
                            </Button>
                            <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="CancelEdit">
                                <Icon Name="IconName.XLg" /> Cancel
                            </Button>
                        </div>
                    }
                    else
                    {
                        <!-- Normal View -->
                        <span class="fw-bold">@cat.Name</span>
                        <div class="btn-group">
                            <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" @onclick="() => StartEdit(cat)">
                                <Icon Name="IconName.PencilSquare" /> Edit
                            </Button>
                            <Button Color="ButtonColor.Info" Size="ButtonSize.Small" @onclick="() => NavigateToDishes(cat.Id)">
                                <Icon Name="IconName.ArrowRightCircle" /> Dishes
                            </Button>
                            <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="async () => await DeleteCat(cat.Id)">
                                <Icon Name="IconName.Trash" /> Delete
                            </Button>
                        </div>
                    }
                </li>
            }
        </ul>
    </div>
}

@code {
    #region General
    private List<CatResponseDto>? cats;

    protected override async Task OnInitializedAsync()
    {
        await LoadCats();
    }

    private async Task LoadCats()
    {
        try
        {
            cats = await Http.GetFromJsonAsync<List<CatResponseDto>>("api/cats");
        }
        catch (Exception ex)
        {
            await Console.Error.WriteLineAsync($"Error while loading cats: {ex.Message}");
            cats = new();
        }
    }
    #endregion

    #region Navigation
    private void NavigateToDishes(Guid catId)
    {
        Navigation?.NavigateTo($"/cats/{catId}/dishes");
    }
    #endregion

    #region Add
    private bool showAddForm = false;
    private string newCatName = string.Empty;

    private void ShowAddForm()
    {
        newCatName = string.Empty;
        showAddForm = true;
    }

    private async Task AddCat()
    {
        if (string.IsNullOrWhiteSpace(newCatName))
        {
            return;
        }

        CatRequestDto request = new CatRequestDto(newCatName);
        HttpResponseMessage response = await Http.PostAsJsonAsync("api/cats", request);

        if (response.IsSuccessStatusCode)
        {
            showAddForm = false;
            await LoadCats();
        }
        else
        {
            await Console.Error.WriteLineAsync($"Failed to add cat: {response.StatusCode}");
        }
    }
    #endregion

    #region Edit
    private Guid? editCatId = null;
    private string editCatName = string.Empty;

    private void StartEdit(CatResponseDto cat)
    {
        editCatId = cat.Id;
        editCatName = cat.Name;
    }

    private void CancelEdit()
    {
        editCatId = null;
        editCatName = string.Empty;
    }

    private async Task SaveEdit(Guid id)
    {
        if (string.IsNullOrWhiteSpace(editCatName))
        {
            return;
        }

        CatRequestDto request = new CatRequestDto(newCatName);
        HttpResponseMessage response = await Http.PutAsJsonAsync($"api/cats/{id}", request);

        if (response.IsSuccessStatusCode)
        {
            editCatId = null;
            await LoadCats();
        }
        else
        {
            await Console.Error.WriteLineAsync($"Failed to update cat {id}: {response.StatusCode}");
        }
    }
    #endregion

    #region Delete
    private async Task DeleteCat(Guid id)
    {
        HttpResponseMessage response = await Http.DeleteAsync($"api/cats/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadCats(); // refresh list
        }
        else
        {
            await Console.Error.WriteLineAsync($"Failed to delete cat {id}: {response.StatusCode}");
        }
    }
    #endregion
}